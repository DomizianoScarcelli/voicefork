version: "3.9"
services:
    #################
    ### DATABASES ###
    #################

    mysql_users:
        image: mysql
        command: --default-authentication-plugin=mysql_native_password
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: usersDB
            MYSQL_USER: admin
            MYSQL_PASSWORD: admin
            MYSQL_TCP_PORT: 3307
        container_name: mysql_users
        ports:
            - 3307:3307
        volumes:
            - db-users:/var/lib/mysql

    postgres_restaurants:
        image: postgres
        restart: always
        environment:
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: admin
            POSTGRES_DB: restaurantsDB
        container_name: postgres_restaurants
        ports:
            - "5432:5432"
        volumes:
            - db-restaurants:/var/lib/postgres
        entrypoint: >
            bash -c "
              /usr/local/bin/docker-entrypoint.sh postgres &
              while ! pg_isready -h localhost -p 5432 > /dev/null 2>&1; do sleep 1; done
              apt-get update &&
              apt-get install -y postgis &&
              PGPASSWORD=admin psql -h localhost -U admin restaurantsDB -c 'CREATE EXTENSION IF NOT EXISTS postgis;' &&
              tail -f /dev/null
            "

    mysql_reservations:
        image: mysql
        command: --default-authentication-plugin=mysql_native_password
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: reservationsDB
            MYSQL_USER: admin
            MYSQL_PASSWORD: admin
            MYSQL_TCP_PORT: 3308
        container_name: mysql_reservations
        ports:
            - 3308:3308
        volumes:
            - db-reservations:/var/lib/mysql

    #################
    ### SERVICES ####
    #################
    users:
        image: doviscarcelli/users
        build:
            dockerfile: Dockerfile
            context: ./users
        container_name: users
        ports:
            - "3001:3001"
        environment:
            - DATABASE_URL=mysql://root:root@mysql_users:3307/usersDB
        volumes:
            - .:/app
        depends_on:
            - mysql_users
            - minio-users
        restart: always
        command: ["sh", "-c", "npx prisma migrate deploy; npm run dev"]
    restaurants:
        image: doviscarcelli/restaurants
        build:
            dockerfile: Dockerfile
            context: ./restaurants
        container_name: restaurants
        ports:
            - "3002:3002"
        environment:
            - DATABASE_URL=postgresql://admin:admin@postgres_restaurants:5432/restaurantsDB
            - EMBEDDINGS_URL=embeddings:3004
        volumes:
            - .:/app
        depends_on:
            - postgres_restaurants
            - minio-restaurants
        restart: always
        command: ["sh", "-c", "npx prisma migrate deploy; npm run dev"]

    reservations:
        image: doviscarcelli/reservations
        build:
            dockerfile: Dockerfile
            context: ./reservations
        container_name: reservations
        ports:
            - "3003:3003"
        environment:
            - DATABASE_URL=mysql://root:root@mysql_reservations:3308/reservationsDB
        volumes:
            - .:/app
        depends_on:
            - mysql_reservations
        restart: always
        command: ["sh", "-c", "npx prisma migrate deploy; npm run dev"]

    embeddings:
        image: doviscarcelli/embeddings
        restart: always
        build:
            dockerfile: Dockerfile
            context: ./embeddings
        container_name: embeddings
        volumes:
            - /tmp/tfhub_modules:/tmp/tfhub_modules
        ports:
            - "3004:3004"

    redis:
        image: redis
        container_name: redis
        ports:
            - 6379:6379

    #################
    ##### MINIO #####
    #################

    minio-users:
        image: minio/minio
        restart: always
        container_name: minio-users
        ports:
            - 9001:9001
            - 9091:9091
        volumes:
            - minio-users-data:/data
        command: server /data --address :9001 --console-address :9091
        environment:
            - "MINIO_ROOT_USER=root"
            - "MINIO_ROOT_PASSWORD=root12345"

    createbucket-users:
        image: minio/mc
        container_name: minio_createbucket_users
        depends_on:
            - minio-users
        entrypoint: >
            /bin/sh -c "
            /usr/bin/mc config host add --api s3v4 minio http://minio-users:9001 root root12345;
            /usr/bin/mc mb minio/avatars;
            /usr/bin/mc anonymous set download minio/avatars;
            exit 0;
            "

    minio-restaurants:
        image: minio/minio
        restart: always
        container_name: minio-restaurants
        ports:
            - 9002:9002
            - 9092:9092
        volumes:
            - minio-restaurants-data:/data
        command: server /data --address :9002 --console-address :9092
        environment:
            - "MINIO_ROOT_USER=root"
            - "MINIO_ROOT_PASSWORD=root12345"

    createbucket-restaurants:
        image: minio/mc
        container_name: minio_createbucket_restaurants
        depends_on:
            - minio-restaurants
        entrypoint: >
            /bin/sh -c "
            /usr/bin/mc config host add --api s3v4 minio http://minio-restaurants:9002 root root12345;
            /usr/bin/mc mb minio/images;
            /usr/bin/mc mb minio/embeddings;
            /usr/bin/mc anonymous set download minio/images;
            /usr/bin/mc anonymous set download minio/embeddings;
            exit 0;
            "

    #################
    #### GATEWAY ####
    #################
    nginx-proxy:
        image: doviscarcelli/nginx
        build:
            dockerfile: Dockerfile
            context: ./proxy
        container_name: nginx-proxy
        depends_on:
            - users
            - restaurants
            - reservations
            - embeddings
        environment:
            USERS_IP: users:3001
            RESTAURANTS_IP: restaurants:3002
            RESERVATIONS_IP: reservations:3003
            EMBEDDINGS_IP: embeddings:3004
        ports:
            - "3000:3000"
        command: /bin/bash -c "envsubst < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf; nginx -g 'daemon off;'"

volumes:
    db-users:
    db-restaurants:
    db-reservations:
    minio-users-data:
    minio-restaurants-data:
